import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

class ApiService {
  static String baseUrl2 = 'http://192.168.1.10:5000';
  static String baseUrl = 'https://bacend-read-book.onrender.com';

  // ========================= üîë AUTH =========================
  // ƒêƒÉng nh·∫≠p
  static Future<void> loginUser(String username, String password) async {
    final response = await http.post(
      Uri.parse('$baseUrl2/api/auth/login'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({'username': username.trim(), 'password': password}),
    );

    final data = jsonDecode(response.body);

    if (response.statusCode == 200) {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('token', data['token']);
      await prefs.setString('userId', data['user']['id']);
      await prefs.setString('username', data['user']['username']);
    } else {
      throw Exception(data['message'] ?? 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
    }
  }

  // ƒêƒÉng k√Ω
  static Future<String> registerUser(
    String username,
    String password,
    String password2,
  ) async {
    final response = await http.post(
      Uri.parse('$baseUrl2/api/auth/register'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'username': username.trim(),
        'password': password,
        'password2': password2,
      }),
    );

    final data = jsonDecode(response.body);
    if (response.statusCode == 201) {
      return 'ƒêƒÉng k√Ω th√†nh c√¥ng!';
    } else {
      throw Exception(data['message'] ?? 'ƒêƒÉng k√Ω th·∫•t b·∫°i');
    }
  }

  // ========================= üë§ USER =========================
  // L·∫•y th√¥ng tin c√° nh√¢n
  static Future<Map<String, dynamic>> getUserInfo() async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');

    final response = await http.get(
      Uri.parse('$baseUrl2/api/user/me'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );
    debugPrint('getUserInfo: ${response.body}');
    final data = jsonDecode(response.body);

    if (response.statusCode == 200) {
      return data['user'];
    } else {
      throw Exception(data['message'] ?? 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
    }
  }

  // ƒê·ªïi m·∫≠t kh·∫©u
  static Future<String> changePassword(
    String oldPassword,
    String newPassword,
    String newPassword2,
  ) async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');

    final response = await http.put(
      Uri.parse('$baseUrl2/api/user/change-password'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      body: jsonEncode({
        'oldPassword': oldPassword,
        'newPassword': newPassword,
        'newPassword2': newPassword2,
      }),
    );

    final data = jsonDecode(response.body);
    if (response.statusCode == 200) {
      return data['message'] ?? 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng';
    } else {
      throw Exception(data['message'] ?? 'Kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u');
    }
  }

  // ========================= üìö BOOK =========================
  // L·∫•y danh s√°ch s√°ch
  static Future<List<dynamic>> fetchBooks() async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');

    var response = await http.get(
      Uri.parse('$baseUrl2/api/books'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    if (response.statusCode == 200) {
      final books = jsonDecode(response.body);
      // L·ªçc b·ªè s√°ch ·∫©n (hidden == true)
      if (books is List) {
        return books.where((b) => !(b is Map && (b['hidden'] == true))).toList();
      }
      return [];
    } else {
      throw Exception('Kh√¥ng th·ªÉ t·∫£i danh s√°ch s√°ch');
    }
  }

  // T√¨m ki·∫øm s√°ch
  static Future<List<dynamic>> searchBooks(String query) async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');

    final response = await http.get(
      Uri.parse('$baseUrl2/api/books/search?query=$query'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    final data = jsonDecode(response.body);
    if (response.statusCode == 200) {
      return data;
    } else {
      throw Exception(data['message'] ?? 'Kh√¥ng th·ªÉ t√¨m ki·∫øm s√°ch');
    }
  }

  // ========================= ‚ù§Ô∏è LOVE =========================
  // Th√™m / g·ª° kh·ªèi y√™u th√≠ch
  static Future<String> toggleBookLove(String bookId) async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');

    final response = await http.put(
      Uri.parse('$baseUrl2/api/user/love/$bookId'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    final data = jsonDecode(response.body);
    if (response.statusCode == 200) {
      return data['message'];
    } else {
      throw Exception(data['message'] ?? 'L·ªói khi x·ª≠ l√Ω y√™u th√≠ch');
    }
  }

  // L·∫•y s√°ch y√™u th√≠ch
  static Future<List<dynamic>> fetchLovedBooks() async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');

    final response = await http.get(
      Uri.parse('$baseUrl2/api/user/love'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    final data = jsonDecode(response.body);
    debugPrint('fetchLovedBooks response: ${response.body}');
    if (response.statusCode == 200) {
      // h√£y ki·ªÉm tra hidden
      if (data['bookLove'] is List) {
        return (data['bookLove'] as List)
            .where((b) => !(b is Map && (b['hidden'] == true)))
            .toList();
      }
      return data['bookLove'];
    } else {
      throw Exception(data['message'] ?? 'L·ªói khi t·∫£i s√°ch y√™u th√≠ch');
    }
  }

  // ========================= üí¨ COMMENT =========================
  // Th√™m b√¨nh lu·∫≠n
  static Future<String> addComment(String bookId, String content) async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');

    final response = await http.post(
      Uri.parse('$baseUrl2/api/books/$bookId/comments'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      body: jsonEncode({'content': content}),
    );

    final data = jsonDecode(response.body);
    if (response.statusCode == 201) {
      return data['message'] ?? 'ƒê√£ th√™m b√¨nh lu·∫≠n';
    } else {
      throw Exception(data['message'] ?? 'Kh√¥ng th·ªÉ th√™m b√¨nh lu·∫≠n');
    }
  }

  // X√≥a b√¨nh lu·∫≠n
  static Future<String> deleteComment(String bookId, String commentId) async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');

    final response = await http.delete(
      Uri.parse('$baseUrl2/api/books/$bookId/comments/$commentId'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    final data = jsonDecode(response.body);
    if (response.statusCode == 200) {
      return data['message'] ?? 'ƒê√£ x√≥a b√¨nh lu·∫≠n';
    } else {
      throw Exception(data['message'] ?? 'Kh√¥ng th·ªÉ x√≥a b√¨nh lu·∫≠n');
    }
  }

  // L·∫•y b√¨nh lu·∫≠n
  static Future<List<dynamic>> getComments(String bookId) async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');

    final response = await http.get(
      Uri.parse('$baseUrl2/api/books/$bookId/comments'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    debugPrint('getComments response: ${response.body}');
    final data = jsonDecode(response.body);

    if (response.statusCode == 200) {
      if (data is List) {
        return data;
      } else if (data is Map && data['comments'] is List) {
        return data['comments'];
      } else {
        return [];
      }
    } else {
      throw Exception(data['message'] ?? 'Kh√¥ng th·ªÉ l·∫•y b√¨nh lu·∫≠n');
    }
  }

  // ========================= üìñ HISTORY =========================
  // L∆∞u ho·∫∑c c·∫≠p nh·∫≠t trang ƒë√£ ƒë·ªçc
  static Future<void> saveReadingProgress(String bookId, int lastPage) async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');
    final userId = prefs.getString('userId');

    final response = await http.post(
      Uri.parse('$baseUrl2/api/history'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      body: jsonEncode({
        'userId': userId,
        'bookId': bookId,
        'lastPage': lastPage,
      }),
    );

    if (response.statusCode != 200) {
      final data = jsonDecode(response.body);
            debugPrint('kh√¥ng c·∫≠p ƒëc l·ªãch s·ª≠ ƒë·ªçc');

      throw Exception(data['message'] + 'Kh√¥ng th·ªÉ l∆∞u l·ªãch s·ª≠ ƒë·ªçc');
    }
  }

  // L·∫•y l·ªãch s·ª≠ ƒë·ªçc theo user
  static Future<List<dynamic>> getUserHistory() async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');
    final userId = prefs.getString('userId');

    final response = await http.get(
      Uri.parse('$baseUrl2/api/history/$userId'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    final data = jsonDecode(response.body);
    if (response.statusCode == 200) {
      return data;
    } else {
      throw Exception(data['message'] ?? 'Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ ƒë·ªçc');
    }
  }
  // ========================= üìñ GENRES =========================
  // L·∫•y danh s√°ch th·ªÉ lo·∫°i
  static Future<List<dynamic>> fetchGenres() async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');

    final response = await http.get(
      Uri.parse('$baseUrl2/api/genres'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    final data = jsonDecode(response.body);
    if (response.statusCode == 200) {
      if (data is List) {
        return data;
      } else if (data is Map && data['genres'] is List) {
        return data['genres'];
      } else {
        return [];
      }
    } else {
      throw Exception(data['message'] ?? 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch th·ªÉ lo·∫°i');
    }
  }
// l·∫•y theo id
  static Future<Map<String, dynamic>> fetchGenreById(String genreId) async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');

    final response = await http.get(
      Uri.parse('$baseUrl2/api/genres/$genreId'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
    );

    final data = jsonDecode(response.body);
    if (response.statusCode == 200) {
      if (data is Map && data['genre'] is Map<String, dynamic>) {
        return data['genre'];
      } else {
        throw Exception('D·ªØ li·ªáu th·ªÉ lo·∫°i kh√¥ng h·ª£p l·ªá');
      }
    } else {
      throw Exception(data['message'] ?? 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin th·ªÉ lo·∫°i');
    }
  }
  
}
